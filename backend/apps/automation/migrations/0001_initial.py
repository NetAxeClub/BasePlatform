# Generated by Django 3.2.19 on 2023-12-20 08:19

from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='AutoEvent',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('commit_user', models.CharField(default='', max_length=42, verbose_name='申请用户')),
                ('remote_ip', models.CharField(blank=True, max_length=128, null=True, verbose_name='调用IP')),
                ('task', models.CharField(choices=[('DNAT', 'DNAT'), ('SNAT', 'SNAT'), ('安全策略', '安全策略'), ('QOS', 'QOS'), ('SLB负载均衡', 'SLB负载均衡'), ('一键封堵', '一键封堵'), ('地址对象', '地址对象'), ('服务对象', '服务对象')], default='', max_length=128, verbose_name='任务模块')),
                ('commit_time', models.DateTimeField(auto_now=True, verbose_name='更新时间')),
            ],
        ),
        migrations.CreateModel(
            name='AutoFlow',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('task_id', models.CharField(default='', max_length=128, verbose_name='任务ID')),
                ('origin', models.CharField(default='运维平台', max_length=128, verbose_name='来源')),
                ('task_result', models.TextField(default=None, editable=False, null=True, verbose_name='任务结果')),
                ('order_code', models.CharField(blank=True, max_length=128, null=True, verbose_name='工单')),
                ('device', models.GenericIPAddressField(blank=True, null=True, verbose_name='设备IP')),
                ('device_id', models.IntegerField(blank=True, null=True, verbose_name='设备ID')),
                ('commit_user', models.CharField(default='', max_length=42, verbose_name='申请用户')),
                ('commit_time', models.DateTimeField(auto_now=True, verbose_name='更新时间')),
                ('task', models.CharField(choices=[('DNAT', 'DNAT'), ('SNAT', 'SNAT'), ('安全策略', '安全策略'), ('QOS', 'QOS'), ('SLB负载均衡', 'SLB负载均衡'), ('一键封堵', '一键封堵'), ('地址对象', '地址对象'), ('服务对象', '服务对象')], default='', max_length=128, verbose_name='任务模块')),
                ('method', models.CharField(choices=[('NETCONF', 'NETCONF'), ('SSH', 'SSH'), ('RESTAPI', 'RESTAPI')], default='', max_length=128, verbose_name='配置模式')),
                ('class_method', models.CharField(default='', max_length=128, verbose_name='类方法')),
                ('remote_ip', models.CharField(blank=True, max_length=128, null=True, verbose_name='调用IP')),
                ('kwargs', models.TextField(blank=True, default='{}', verbose_name='任务参数')),
                ('ttp', models.TextField(blank=True, default='{}', verbose_name='结果解析')),
                ('commands', models.TextField(blank=True, default='[]', verbose_name='下发命令')),
                ('back_off_commands', models.TextField(blank=True, default='[]', verbose_name='回退命令')),
                ('state', models.CharField(choices=[('Draft', 'Draft'), ('Approved', 'Approved'), ('Published', 'Published'), ('Failed', 'Failed'), ('BackOff', 'BackOff'), ('Finish', 'Finish')], default='Draft', max_length=200, verbose_name='流程状态')),
                ('code', models.IntegerField(blank=True, default=9000, null=True, verbose_name='状态码')),
            ],
            options={
                'verbose_name': '自动化流程表',
                'verbose_name_plural': '自动化流程表',
                'db_table': 'auto_work_flow',
            },
        ),
        migrations.CreateModel(
            name='AutomationInventory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('ans_group_name', models.CharField(max_length=32, unique=True, verbose_name='任务名称')),
                ('ans_group_vars', models.TextField(blank=True, null=True, verbose_name='组变量')),
                ('ans_group_memo', models.TextField(blank=True, null=True, verbose_name='组描述')),
                ('ans_group_datetime', models.DateTimeField(auto_now_add=True, verbose_name='添加时间')),
                ('task', models.CharField(choices=[('一键封堵', '一键封堵'), ('网络打通', '网络打通')], default='一键封堵', max_length=64, verbose_name='任务模块')),
            ],
        ),
        migrations.CreateModel(
            name='AutoVars',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('ans_name', models.CharField(blank=True, max_length=32, null=True, verbose_name='主机名')),
                ('ans_host', models.GenericIPAddressField(blank=True, null=True, verbose_name='主机IP')),
                ('ans_vars', models.TextField(blank=True, null=True, verbose_name='主机变量')),
                ('ans_obj', models.CharField(blank=True, max_length=32, null=True, verbose_name='对象名')),
                ('ans_memo', models.CharField(blank=True, max_length=128, null=True, verbose_name='描述')),
                ('task', models.CharField(choices=[('DNAT', 'DNAT'), ('SNAT', 'SNAT'), ('安全策略', '安全策略'), ('QOS', 'QOS'), ('SLB负载均衡', 'SLB负载均衡'), ('地址对象', '地址对象'), ('服务对象', '服务对象')], default='地址对象', max_length=64, verbose_name='模块')),
            ],
        ),
        migrations.CreateModel(
            name='CollectionMatchRule',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(blank=True, max_length=10, verbose_name='规则名')),
                ('fields', models.CharField(blank=True, default='', max_length=50, null=True, verbose_name='匹配字段')),
                ('operator', models.CharField(blank=True, choices=[('__exact', '精确匹配'), ('__iexact', '不区分大小写的精确匹配'), ('__contains', '包含指定值'), ('__icontains', '不区分大小写包含指定值'), ('__startswith', '以指定值开头'), ('__endswith', '以指定值结尾'), ('__istartswith', '不区分大小写以指定值开头'), ('__iendswith', '不区分大小写以指定值结尾')], default='__exact', max_length=50, null=True, verbose_name='操作符')),
                ('value', models.CharField(blank=True, default='', max_length=50, null=True, verbose_name='匹配值')),
            ],
            options={
                'verbose_name': '采集规则匹配方法表',
                'verbose_name_plural': '采集规则匹配方法表',
                'db_table': 'collection_match_rule',
            },
        ),
        migrations.CreateModel(
            name='CollectionPlan',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('vendor', models.CharField(choices=[('H3C', 'H3C'), ('Huawei', 'Huawei'), ('Cisco', 'Cisco'), ('Ruijie', 'ruijie'), ('Hillstone', 'Hillstone')], default='H3C', max_length=50, verbose_name='厂商')),
                ('category', models.CharField(choices=[('交换机', '交换机'), ('防火墙', '防火墙'), ('路由器', '路由器')], default='交换机', max_length=50, verbose_name='类型')),
                ('name', models.CharField(blank=True, max_length=100, null=True, verbose_name='采集方案')),
                ('commands', models.TextField(blank=True, default='[]', verbose_name='下发命令')),
                ('netconf_method', models.TextField(blank=True, default='[]', verbose_name='方法列表')),
                ('memo', models.TextField(blank=True, null=True, verbose_name='备注')),
                ('netconf_class', models.CharField(blank=True, max_length=100, null=True, verbose_name='Netconf连接类')),
            ],
            options={
                'verbose_name': '设备数据采集方案',
                'verbose_name_plural': '设备数据采集方案表',
                'db_table': 'device_collection_plan',
            },
        ),
        migrations.CreateModel(
            name='CollectionRule',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(blank=True, default='', max_length=100, null=True, verbose_name='规则名')),
                ('operation', models.CharField(blank=True, default='', max_length=50, null=True, verbose_name='运算符')),
                ('module', models.CharField(choices=[('BASE', '基础平台'), ('SouthDriver', '南向驱动')], default='BASE', max_length=50, verbose_name='执行模块')),
                ('method', models.CharField(choices=[('NETCONF', 'NETCONF'), ('CLI', 'CLI'), ('REST_API', 'REST_API')], default='CLI', max_length=50, verbose_name='执行方法')),
                ('execute', models.TextField(blank=True, default='', verbose_name='执行内容')),
                ('plugin', models.CharField(default='', max_length=50, verbose_name='解析插件标识')),
            ],
            options={
                'verbose_name': '采集规则表',
                'verbose_name_plural': '采集规则表',
                'db_table': 'collection_rule',
            },
        ),
        migrations.AddIndex(
            model_name='collectionrule',
            index=models.Index(fields=['id'], name='collection__id_1337f6_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='collectionplan',
            unique_together={('name', 'vendor')},
        ),
        migrations.AddField(
            model_name='collectionmatchrule',
            name='rule',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='match_rule', to='automation.collectionrule'),
        ),
        migrations.AddField(
            model_name='automationinventory',
            name='ans_group_hosts',
            field=models.ManyToManyField(related_name='to_inventory', to='automation.AutoVars', verbose_name='组内主机'),
        ),
        migrations.AddField(
            model_name='autoflow',
            name='event',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='subs', to='automation.autoevent', verbose_name='关联事件'),
        ),
        migrations.AddIndex(
            model_name='collectionmatchrule',
            index=models.Index(fields=['id'], name='collection__id_fde923_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='collectionmatchrule',
            unique_together={('rule', 'name')},
        ),
    ]
